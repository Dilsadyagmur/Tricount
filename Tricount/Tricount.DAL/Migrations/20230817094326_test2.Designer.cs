// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tricount.DAL.Contexts;

#nullable disable

namespace Tricount.DAL.Migrations
{
    [DbContext(typeof(SqlDbContext))]
<<<<<<<< HEAD:Tricount/Tricount.DAL/Migrations/20230817113256_initDb.Designer.cs
    [Migration("20230817113256_initDb")]
    partial class initDb
========
    [Migration("20230817094326_test2")]
    partial class test2
>>>>>>>> Test:Tricount/Tricount.DAL/Migrations/20230817094326_test2.Designer.cs
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GroupUser", b =>
                {
                    b.Property<Guid>("GroupsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("GroupsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("GroupUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

<<<<<<<< HEAD:Tricount/Tricount.DAL/Migrations/20230817113256_initDb.Designer.cs
========
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

>>>>>>>> Test:Tricount/Tricount.DAL/Migrations/20230817094326_test2.Designer.cs
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Tricount.Entities.Concrete.Expense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
<<<<<<<< HEAD:Tricount/Tricount.DAL/Migrations/20230817113256_initDb.Designer.cs
                        .HasDefaultValue(new Guid("dd7d261e-3e4b-4ec1-b901-d2d79dd1ffac"));
========
                        .HasDefaultValue(new Guid("1dfebb6c-0981-40c6-97cf-f8f88189c530"));
>>>>>>>> Test:Tricount/Tricount.DAL/Migrations/20230817094326_test2.Designer.cs

                    b.Property<double>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
<<<<<<<< HEAD:Tricount/Tricount.DAL/Migrations/20230817113256_initDb.Designer.cs
                        .HasDefaultValue(new DateTime(2023, 8, 17, 14, 32, 56, 875, DateTimeKind.Local).AddTicks(3320));
========
                        .HasDefaultValue(new DateTime(2023, 8, 17, 12, 43, 26, 560, DateTimeKind.Local).AddTicks(2273));
>>>>>>>> Test:Tricount/Tricount.DAL/Migrations/20230817094326_test2.Designer.cs

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
<<<<<<<< HEAD:Tricount/Tricount.DAL/Migrations/20230817113256_initDb.Designer.cs
                        .HasDefaultValue(new DateTime(2023, 8, 17, 14, 32, 56, 875, DateTimeKind.Local).AddTicks(3186));
========
                        .HasDefaultValue(new DateTime(2023, 8, 17, 12, 43, 26, 560, DateTimeKind.Local).AddTicks(2117));
>>>>>>>> Test:Tricount/Tricount.DAL/Migrations/20230817094326_test2.Designer.cs

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("UserId1");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("Tricount.Entities.Concrete.ExpenseDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
<<<<<<<< HEAD:Tricount/Tricount.DAL/Migrations/20230817113256_initDb.Designer.cs
                        .HasDefaultValue(new Guid("0bcb3b51-3ea7-435b-b399-bd834153f200"));
========
                        .HasDefaultValue(new Guid("84f27b1a-eba9-493e-8d02-0f6a4e7fe703"));
>>>>>>>> Test:Tricount/Tricount.DAL/Migrations/20230817094326_test2.Designer.cs

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
<<<<<<<< HEAD:Tricount/Tricount.DAL/Migrations/20230817113256_initDb.Designer.cs
                        .HasDefaultValue(new DateTime(2023, 8, 17, 14, 32, 56, 875, DateTimeKind.Local).AddTicks(5509));
========
                        .HasDefaultValue(new DateTime(2023, 8, 17, 12, 43, 26, 560, DateTimeKind.Local).AddTicks(4620));
>>>>>>>> Test:Tricount/Tricount.DAL/Migrations/20230817094326_test2.Designer.cs

                    b.Property<Guid>("ExpenseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
<<<<<<<< HEAD:Tricount/Tricount.DAL/Migrations/20230817113256_initDb.Designer.cs
                        .HasDefaultValue(new DateTime(2023, 8, 17, 14, 32, 56, 875, DateTimeKind.Local).AddTicks(5385));
========
                        .HasDefaultValue(new DateTime(2023, 8, 17, 12, 43, 26, 560, DateTimeKind.Local).AddTicks(4432));
>>>>>>>> Test:Tricount/Tricount.DAL/Migrations/20230817094326_test2.Designer.cs

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("UserId1");

                    b.HasIndex("ExpenseId", "GroupId", "UserId")
                        .IsUnique();

                    b.ToTable("ExpenseDetails");
                });

            modelBuilder.Entity("Tricount.Entities.Concrete.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
<<<<<<<< HEAD:Tricount/Tricount.DAL/Migrations/20230817113256_initDb.Designer.cs
                        .HasDefaultValue(new Guid("c2b7801e-cdc9-4733-b12c-eb2310741a8a"));
========
                        .HasDefaultValue(new Guid("e2b25a8e-c3ea-4b28-8621-c0bdb6910017"));
>>>>>>>> Test:Tricount/Tricount.DAL/Migrations/20230817094326_test2.Designer.cs

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
<<<<<<<< HEAD:Tricount/Tricount.DAL/Migrations/20230817113256_initDb.Designer.cs
                        .HasDefaultValue(new DateTime(2023, 8, 17, 14, 32, 56, 875, DateTimeKind.Local).AddTicks(7792));
========
                        .HasDefaultValue(new DateTime(2023, 8, 17, 12, 43, 26, 560, DateTimeKind.Local).AddTicks(7500));
>>>>>>>> Test:Tricount/Tricount.DAL/Migrations/20230817094326_test2.Designer.cs

                    b.Property<Guid>("CreatedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DefaultCurrency")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
<<<<<<<< HEAD:Tricount/Tricount.DAL/Migrations/20230817113256_initDb.Designer.cs
                        .HasDefaultValue(new DateTime(2023, 8, 17, 14, 32, 56, 875, DateTimeKind.Local).AddTicks(7687));
========
                        .HasDefaultValue(new DateTime(2023, 8, 17, 12, 43, 26, 560, DateTimeKind.Local).AddTicks(7386));
>>>>>>>> Test:Tricount/Tricount.DAL/Migrations/20230817094326_test2.Designer.cs

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Tricount.Entities.Concrete.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
<<<<<<<< HEAD:Tricount/Tricount.DAL/Migrations/20230817113256_initDb.Designer.cs
                        .HasDefaultValue(new Guid("172e8aa9-2a34-4a6b-93bd-8d2d2d4aadcf"));
========
                        .HasDefaultValue(new Guid("e767f023-feb3-4fde-9133-a9e67544c12b"));
>>>>>>>> Test:Tricount/Tricount.DAL/Migrations/20230817094326_test2.Designer.cs

                    b.Property<double>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
<<<<<<<< HEAD:Tricount/Tricount.DAL/Migrations/20230817113256_initDb.Designer.cs
                        .HasDefaultValue(new DateTime(2023, 8, 17, 14, 32, 56, 875, DateTimeKind.Local).AddTicks(9373));
========
                        .HasDefaultValue(new DateTime(2023, 8, 17, 12, 43, 26, 560, DateTimeKind.Local).AddTicks(9261));
>>>>>>>> Test:Tricount/Tricount.DAL/Migrations/20230817094326_test2.Designer.cs

                    b.Property<Guid>("ExpenseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
<<<<<<<< HEAD:Tricount/Tricount.DAL/Migrations/20230817113256_initDb.Designer.cs
                        .HasDefaultValue(new DateTime(2023, 8, 17, 14, 32, 56, 875, DateTimeKind.Local).AddTicks(9267));
========
                        .HasDefaultValue(new DateTime(2023, 8, 17, 12, 43, 26, 560, DateTimeKind.Local).AddTicks(9134));
>>>>>>>> Test:Tricount/Tricount.DAL/Migrations/20230817094326_test2.Designer.cs

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ExpenseId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("UserId1");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Tricount.Entities.Concrete.User", b =>
                {
<<<<<<<< HEAD:Tricount/Tricount.DAL/Migrations/20230817113256_initDb.Designer.cs
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");
========
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");
>>>>>>>> Test:Tricount/Tricount.DAL/Migrations/20230817094326_test2.Designer.cs

                    b.Property<int>("DefaultCurrency")
                        .HasColumnType("int");

<<<<<<<< HEAD:Tricount/Tricount.DAL/Migrations/20230817113256_initDb.Designer.cs
                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TcNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
========
                    b.Property<string>("TCNO")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasIndex("TCNO")
                        .IsUnique()
                        .HasFilter("[TCNO] IS NOT NULL");

                    b.HasDiscriminator().HasValue("User");
>>>>>>>> Test:Tricount/Tricount.DAL/Migrations/20230817094326_test2.Designer.cs
                });

            modelBuilder.Entity("GroupUser", b =>
                {
                    b.HasOne("Tricount.Entities.Concrete.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tricount.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
<<<<<<<< HEAD:Tricount/Tricount.DAL/Migrations/20230817113256_initDb.Designer.cs
                    b.HasOne("Tricount.Entities.Concrete.User", null)
========
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
>>>>>>>> Test:Tricount/Tricount.DAL/Migrations/20230817094326_test2.Designer.cs
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
<<<<<<<< HEAD:Tricount/Tricount.DAL/Migrations/20230817113256_initDb.Designer.cs
                    b.HasOne("Tricount.Entities.Concrete.User", null)
========
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
>>>>>>>> Test:Tricount/Tricount.DAL/Migrations/20230817094326_test2.Designer.cs
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

<<<<<<<< HEAD:Tricount/Tricount.DAL/Migrations/20230817113256_initDb.Designer.cs
                    b.HasOne("Tricount.Entities.Concrete.User", null)
========
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
>>>>>>>> Test:Tricount/Tricount.DAL/Migrations/20230817094326_test2.Designer.cs
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
<<<<<<<< HEAD:Tricount/Tricount.DAL/Migrations/20230817113256_initDb.Designer.cs
                    b.HasOne("Tricount.Entities.Concrete.User", null)
========
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
>>>>>>>> Test:Tricount/Tricount.DAL/Migrations/20230817094326_test2.Designer.cs
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tricount.Entities.Concrete.Expense", b =>
                {
                    b.HasOne("Tricount.Entities.Concrete.Group", null)
                        .WithMany("Expenses")
                        .HasForeignKey("GroupId");

                    b.HasOne("Tricount.Entities.Concrete.User", "User")
                        .WithMany("Expenses")
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tricount.Entities.Concrete.ExpenseDetail", b =>
                {
                    b.HasOne("Tricount.Entities.Concrete.Expense", "Expense")
                        .WithMany("ExpenseDetails")
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tricount.Entities.Concrete.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tricount.Entities.Concrete.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("Expense");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tricount.Entities.Concrete.Payment", b =>
                {
                    b.HasOne("Tricount.Entities.Concrete.Expense", "Expense")
                        .WithMany()
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tricount.Entities.Concrete.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId1");

                    b.Navigation("Expense");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tricount.Entities.Concrete.Expense", b =>
                {
                    b.Navigation("ExpenseDetails");
                });

            modelBuilder.Entity("Tricount.Entities.Concrete.Group", b =>
                {
                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("Tricount.Entities.Concrete.User", b =>
                {
                    b.Navigation("Expenses");

                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
